/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IVwTipsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateTips"
      | "getBalance"
      | "getFeeRate"
      | "getPriceFeedAddress"
      | "tip"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateTips",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFeedAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tip",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "calculateTips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFeeRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFeedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface IVwTips extends BaseContract {
  connect(runner?: ContractRunner | null): IVwTips;
  waitForDeployment(): Promise<this>;

  interface: IVwTipsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateTips: TypedContractMethod<[qty: BigNumberish], [bigint], "view">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getFeeRate: TypedContractMethod<[], [bigint], "view">;

  getPriceFeedAddress: TypedContractMethod<[], [string], "view">;

  tip: TypedContractMethod<
    [to: AddressLike, qty: BigNumberish],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateTips"
  ): TypedContractMethod<[qty: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriceFeedAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tip"
  ): TypedContractMethod<
    [to: AddressLike, qty: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
